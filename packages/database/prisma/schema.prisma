generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id
  email    String  @unique
  username String  @unique
  avatar   String
  stripeId String?
}

model Guild {
  id     String  @id
  role   String?
  prefix String  @default("!")

  suggestionEmbedId String?
  suggestionChannel String?

  ticketPanelEmbedId String?
  ticketCategory     String?
  ticketEmbedId      String?

  giveawayEmbedId String?

  levelEmbedId String?

  warnEmbedId String?

  suggestionEmbed  Embed? @relation(fields: [suggestionEmbedId], references: [id], name: "suggestionEmbed", onDelete: Cascade)
  ticketPanelEmbed Embed? @relation(fields: [ticketPanelEmbedId], references: [id], name: "ticketPanelEmbed", onDelete: Cascade)
  ticketEmbed      Embed? @relation(fields: [ticketEmbedId], references: [id], name: "ticketEmbed", onDelete: Cascade)
  giveawayEmbed    Embed? @relation(fields: [giveawayEmbedId], references: [id], name: "giveawayEmbed", onDelete: Cascade)
  levelEmbed       Embed? @relation(fields: [levelEmbedId], references: [id], name: "levelEmbed", onDelete: Cascade)
  warnEmbed        Embed? @relation(fields: [warnEmbedId], references: [id], name: "warnEmbed", onDelete: Cascade)

  eventLogConfigs   EventLogConfig[]
  logRecords        LogRecord[]
  levels            Level[]
  tickets           Ticket[]
  suggestions       Suggestion[]
  giveaways         Giveaway[]
  warns             Warn[]
  webhooks          Webhook[]
  ticketTranscripts TicketTranscript[]
  reactionRoles     ReactionRole[]
}

model GuildMember {
  userId  String
  guildId String
  xp      Int    @default(0)

  levelId Int?
  level   Level? @relation(fields: [levelId], references: [id], onDelete: SetNull)

  @@id([userId, guildId])
}

model EventLogConfig {
  guildId   String
  channelId String
  event     EventType
  embedId   String?

  embed Embed? @relation(fields: [embedId], references: [id], onDelete: Cascade)
  guild Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@id([guildId, event])
}

enum EventType {
  CHANNEL_CREATE
  CHANNEL_DELETE
  GUILD_BAN_ADD
  GUILD_BAN_REMOVE
  GUILD_MEMBER_ADD
  GUILD_MEMBER_UPDATE
  GUILD_BOOST
  INVITE_CREATE
  INVITE_DELETE
  MESSAGE_DELETE
  GUILD_WARN_CREATE
  GUILD_WARN_DELETE
  TRANSCRIPT_CREATE
}

model Embed {
  id          String  @id @default(cuid())
  title       String?
  description String?
  color       String  @default("#1D4ED8")

  eventLogConfig EventLogConfig[]

  suggestionGuild  Guild[] @relation(name: "suggestionEmbed")
  ticketPanelGuild Guild[] @relation(name: "ticketPanelEmbed")
  ticketGuild      Guild[] @relation(name: "ticketEmbed")
  giveawayGuild    Guild[] @relation(name: "giveawayEmbed")
  levelGuild       Guild[] @relation(name: "levelEmbed")
  warnGuild        Guild[] @relation(name: "warnEmbed")
}

model LogRecord {
  id        Int      @id @default(autoincrement())
  guildId   String
  message   String
  author    String
  createdAt DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Level {
  id        Int      @id @default(autoincrement())
  xp        Int
  name      String
  role      String?
  guildId   String

  guild   Guild         @relation(fields: [guildId], references: [id], onDelete: Cascade)
  members GuildMember[]
}

model Ticket {
  id        String   @id
  createdAt DateTime @default(now())
  owner     String
  guildId   String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model TicketTranscript {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  owner     String
  data      Json
  guildId   String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Suggestion {
  id          Int      @id @default(autoincrement())
  messageId   String?
  description String
  author      String
  status      Status   @default(PENDING)
  createdAt   DateTime @default(now())
  guildId     String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

enum Status {
  APPROVED
  DENIED
  PENDING
}

model Giveaway {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  winnerCount Int
  channelId   String
  messageId   String?  @unique
  createdAt   DateTime @default(now())
  endsAt      DateTime
  guildId     String

  guild        Guild                 @relation(fields: [guildId], references: [id], onDelete: Cascade)
  participants GiveawayParticipant[]
}

model GiveawayParticipant {
  id         Int    @id @default(autoincrement())
  giveawayId Int
  userId     String

  giveaway Giveaway @relation(fields: [giveawayId], references: [id], onDelete: Cascade)
}

model Warn {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    String
  reason    String
  moderator String
  createdAt DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Webhook {
  token   String        @id @default(cuid())
  action  WebhookAction
  payload String
  guildId String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

enum WebhookAction {
  ASSIGN_ROLE
}

model ReactionRole {
  id          Int    @id @default(autoincrement())
  roles       Role[]
  title       String
  description String
  guildId     String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Role {
  id             Int     @id @default(autoincrement())
  name           String
  description    String?
  emoji          String?
  roleId         String
  reactionRoleId Int

  reactionRole ReactionRole @relation(fields: [reactionRoleId], references: [id], onDelete: Cascade)
}

model Statistic {
  id    String @id
  value Int    @default(0)
}